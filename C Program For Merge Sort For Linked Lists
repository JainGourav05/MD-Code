![](https://prepbytes-misc-images.s3.ap-south-1.amazonaws.com/assets/1645011665100-Article_188.png)
<h3>Introduction</h3>
<p>The linked list is one of the most important concepts and data structures to learn while preparing for interviews. Having a good grasp of Linked Lists can be a huge plus point in a coding interview.</p>
<h3>Problem Statement</h3>
<p>According to the problem statement, we are given a singly linked list, and we need to sort this singly linked list using merge sort.</p>
<h3>Merge Sort</h3>
<p>Merge sort is a divide and conquer algorithm. </p>
<ul>
<li>It is a recursive algorithm. </li>
<li>In merge sort, we have to divide the container (container can be an array, list etc.) into two halves, then we will call merge sort recursively on the two halves. </li>
<li>These two merge sort call return sorted container, and we then merge these sorted container in such a way that the whole container remains sorted.</li>
<li>Have a look at the below image to see in a nutshell how merge sort works.


</li>
</ul>

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_1-40.png)

<p>Now, we have a brief understanding of the merge sort algorithm. Let’s learn how to apply merge sort on a singly linked list.</p>
<p>In the case of a linked list, we will recursively divide the list into two sub-lists at each step till list size is reduced to one and while backtracking from the recursive call, we have two sorted lists, which will be merged together into a single list by merge operation in linear time.</p>
<p>Now we will look at the approach and algorithm, to know how to apply merge sort on a singly linked list.</p>
<h3>Approach and Algorithm (Merge Sort)</h3>
<p>1) If the <strong>head</strong> of the linked list is NULL or <strong>(head→ next == NULL)</strong>, it shows that our linked list is of size 1 or 0 and a linked list of size zero or one is already sorted. So, Don’t do anything, just return <strong>head</strong>.
2) If the linked list is of <strong>size &gt; 1</strong> then first find the <strong>middle</strong> of the linked list. </p>
<ul>
<li>For finding middle node, use <strong>slow and fast pointer method</strong>. </li>
<li>In this method, we take two pointers <strong>slow</strong> and <strong>fast</strong> and initialize them with <strong>head</strong>. </li>
<li>Then we move the <strong>slow pointer</strong> by one node and <strong>fast pointer</strong> by 2 nodes until fast pointer reaches the tail of the list. </li>
<li>And when the <strong>fast pointer</strong> reaches the <strong>tail</strong>, the <strong>slow pointer</strong> will be at the <strong>middle</strong> of the linked list.</li>
<li>The only reason why <strong>slow pointer</strong> will be at the <strong>middle</strong> of the list, when <strong>fast</strong> reaches <strong>tail</strong> is because the <strong>slow pointer is moving with half the speed of fast pointer</strong> and when the fast pointer has traversed the complete list till then the slow pointer will have only traversed half the list, so that’s why slow pointer will be at the middle of the list.
3) Now, store <strong>slow → next</strong> in a pointer named <strong>afterMiddle</strong> and assign <strong>slow → next = NULL</strong>.
4) Recursively call <strong>mergeSort()</strong> on both <strong>left and right sub-linked list</strong> and store the new head of the left and right linked list in pointer variable <strong>part1</strong> and <strong>part2</strong>.
5) When the recursive call on the left and right sub-list returns, merge the two linked lists returned by recursive calls (remember that the recursive call will return the sorted lists).
6) Return the final head of the merged linkedlist.</li>
</ul>
<h4>Merging two sorted linked list Algorithm:</h4>
<p>When the two recursive call will return the two sorted list, then we will merge those sorted list into a single list using these below steps.
1) Initialize two pointer variables named <strong>curr1</strong> and <strong>curr2</strong> with left sorted sub-list and right sorted sub-list.
2) Initialize two pointer variable named <strong>si</strong> and <strong>ei</strong> with NULL; these two pointer variables are the <strong>head</strong> and <strong>tail</strong> of the final sorted linked list.
3) If the data of <strong>curr1</strong> is less than the data of <strong>curr2</strong>, then, store <strong>curr1</strong> in next of <strong>ei</strong> &amp; move <strong>curr1</strong> to the next of <strong>curr1</strong>.
4) Else, if the data of <strong>curr2</strong> is less than the data of <strong>curr1</strong>, then store <strong>curr2</strong> in next of <strong>ei</strong> &amp; move <strong>curr2</strong> to the next of <strong>curr2</strong>.
5) Repeat steps 3 and 4 until either of the <strong>curr1</strong> or <strong>curr2</strong> is not equal to NULL.
6) Now add any remaining nodes of the first or the second linked list to the merged linked list.
7) Return head of merged sorted linked list containing all the nodes of the two sorted sub-lists.</p>
<h3>Dry Run</h3>

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_2-39.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_3-24.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_4-15.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_5-10.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_6-10.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_7-9.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_8-9.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_9-5.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/09/p_10-3.png)

<h3>Code Implementation</h3>
<p>[TABS_R id=5362]</p>
<h4>Output</h4>
<p>Linked List before sorting
8 9 5 3 2
Linked List after sorting
2 3 5 8 9 </p>
<p><strong>Time Complexity:</strong> O(n*log n)</p>
<p>[forminator_quiz id="5363"]</p>
<p>So, In this blog, we have learned how to apply merge sort on a Singly Linked List. This is an important question when it comes to coding interviews. If you want to practice more questions on linked lists feel free to solve them at <a href="https://mycode.prepbytes.com/interview-coding/practice/linked-list">Prepbytes (Linked Lists)</a>.</p>
