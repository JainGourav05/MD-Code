![](https://prepbytes-misc-images.s3.ap-south-1.amazonaws.com/assets/1645186296940-Extract%20leaves%20of%20a%20binary%20tree.png)
### Introduction
The linked list is one of the most important concepts and data structures to learn while preparing for interviews. Having a good grasp of Linked Lists can be a huge plus point in a coding interview.

### Problem Statement
In this question, we are given a binary tree. We have to extract all the leaves of it in a Doubly Linked List. We should note that the Doubly Linked List should be created in place. 

### Problem Statement Understanding
We should assume that the node structure of the doubly linked list and the binary tree is the same. What changes is the meaning of  left and right pointers. In the Doubly linked list, left means the previous pointer and right means the next pointer. 

A leaf node is a node which has no children. So, we have to traverse through the tree and whenever we find a leaf node, we will add it to our Doubly Linked List.

#### Input: 
**Input Binary Tree**
![](https://blog.prepbytes.com/wp-content/uploads/2021/08/AI_6_2-01.png)


#### Output: 
**Doubly Linked List** 
![](https://blog.prepbytes.com/wp-content/uploads/2021/08/6_3-01.png)

**Modified Binary Tree**

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/6_4-01.png)

#### Explanation:
As the leaf nodes of the binary tree are 4, 5 and 3, they will be inserted in a doubly-linked list. 

We are going to traverse through the given binary tree and whenever we reach a leaf node, we will add it to our doubly linked list. Let us have a look at the approach.

### Approach 
We are going to use recursion to solve this problem. If the root of the tree is NULL, then we will simply return NULL. This is going to be our base case. If the base case fails, then we will check if the current node is a leaf node or not.

If the current node is a leaf node, then we will change pointers and remove that node from the binary tree and add it to our doubly linked list. If the current node is not a leaf node, we will recur for the right and left subtrees of the node. In the end, we will simply return the root. 

### Algorithm
- Base case - If the root is NULL, return NULL
- If the root is a leaf node, then we will set the root’s right pointer as the previous head of the doubly linked list. We don’t need to set the left pointer as the left is already NULL
- Now, change the left pointer of the previous head I.e. the left of the head will point to root.
- Make root the new head.
- Return NULL
- If the above condition fails, then recur for the left and right subtrees.
- In the end, return root.

### Dry Run

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/AI_6_1-01.png)

#### Code Implementation

[TABS_R id=3527]

#### Output: 
**Inorder Traversal of given Tree is:** 
4 2 5 1 3

**Extracted Double Linked list is:**
4 5 3

**In order traversal of the modified tree is:**
2 1


[forminator_quiz id="3529"]

**Space Complexity:** O(number of leaf nodes), as the doubly linked list will contain the leaf nodes.


So, in this article, we have tried to explain the most efficient approach to extract leaves of a binary tree in a doubly-linked list. If you want to solve more questions on Linked List, which are curated by our expert mentors at PrepBytes, you can follow this link [Linked List](https://mycode.prepbytes.com/interview-coding/practice/linked-list).
