![](https://prepbytes-misc-images.s3.ap-south-1.amazonaws.com/assets/1644922284394-92.Priority%20using%20doubly-05.png)
<h3>Introduction</h3>
<p>The linked list is one of the most important concepts and data structures to learn while preparing for interviews. Having a good grasp of Linked Lists can be a huge plus point in a coding interview.</p>
<h3>Problem Statement</h3>
<p>In this problem, we are given a set of nodes with their respective priority and our task is to implement a priority queue using a doubly linked list, which supports the following operations:</p>
<h4>Operations</h4>
<p><strong>push(x, p):</strong> This function inserts an element x with priority p in the priority queue at the appropriate position.
<strong>pop():</strong> This function removes and returns the element with the highest priority in the priority queue.
<strong>peek():</strong> This function returns the element with the highest priority in the priority queue without removing it.</p>
<p>Now what we are going to do is, create a doubly linked list, but with a few tweaks such that the highest priority element will always be the head of the linked list. That means the list will be sorted in the descending order of the elements based on their priority. By doing this, we can do the <strong>peek()</strong> operation in O(1) time.</p>
<p>For the <strong>push()</strong> operation, we have to find a suitable position based upon the priority to insert the current node in the linked list so that the overall order of the priority queue is maintained. This will take O(n) time. Let us have a look at the approaches.</p>
<p>Now, let's implement these functions one by one.</p>
<h3>push(x, p)</h3>
<p>In push(x,p) operation to push an elemet x with priority p, we will have to first search for an appropriate position in the priority queue and then insert the element at that position.</p>
<p>The appropriate place to insert is just before the first element whose priority is less than p i.e. the priority of element we are inserting currently in push operation.</p>
<p><strong>For example</strong>
If the priorityQueue:</p>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/example-input-4.png" alt="" /></p>
<p><strong>Note:</strong> The first element inside brackets represents the data, and the second element represents priority.</p>
<ul>
<li>If we want to push(6, 3), the appropriate place for (6,3) is just before (2,2).</li>
</ul>
<p>Therefore, the priorityQueue after insertion is:</p>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/example-output-4.png" alt="" /></p>
<h3>Algorithm</h3>
<ul>
<li>We will traverse the priority queue starting from the head node and find the first node whose priority is less than p. </li>
<li>One of the 3 cases is possible.
1) There is no element whose priority is less than p. In this case, the new node will be inserted at the end of the priority queue.
2) All the nodes have priority queue less than p. In this case, the new node will be inserted at the beginning of the priority queue.
3) There are some nodes which have priority greater than p and some which have priority less than p. In this case, the new node will be inserted before the first node with priority less than p. This case is explained in the above example.</li>
</ul>
<h3>Dry Run</h3>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/Priority-Queue-using-Doubly-Linked-List-1-1.png" alt="" /></p>
<h3>Code Implementation</h3>
<p>[TABS_R id=4242]</p>
<p><strong>Time Complexity:</strong> O(n), as we need to make traversal to find the first node having priority less than the priority of the node which we are pushing.</p>
<h3>pop()</h3>
<p>The element with the highest priority will always be present at the beginning of the priority queue.</p>
<ul>
<li>If the priority queue is not empty, we will delete the first element and return it, else it is impossible to pop.</li>
<li>Else do nothing and return -1.</li>
</ul>
<h3>Dry Run</h3>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/Priority-Queue-using-Doubly-Linked-List-2-1.png" alt="" /></p>
<h3>Code Implementation</h3>
<p>[TABS_R id=4243]</p>
<p><strong>Time Complexity:</strong> O(1), as the element which we are seeking is at the head of the priority queue, and we have a pointer to head.</p>
<h3>peek()</h3>
<p>The element with the highest priority will always be present at the beginning of the priority queue. </p>
<ul>
<li>If the priority queue is not empty, we will have to return the first element of the priority queue as it is the element with the highest priority.</li>
<li>Else return -1.</li>
</ul>
<h3>Dry Run</h3>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/Priority-Queue-using-Doubly-Linked-List-3-1.png" alt="" /></p>
<h3>Code Implementation</h3>
<p>[TABS_R id=4239]</p>
<p><strong>Time Complexity:</strong> O(1), as the element which we are seeking is at the head of the priority queue, and we have a pointer to head.</p>
<h3>Code Implementation:</h3>
<p>[TABS_R id=4240]</p>
<h4>Output</h4>
<p>1
7
1
5</p>
<p><strong>Time Complexity:</strong> O(N) for push operation, O(1) for pop operation, and O(1) for peek operation.
<strong>Space Complexity:</strong> O(N), where N is the total number of nodes.</p>
<p>So, in this article, you have learnt how to implement a priority queue using a doubly linked list. This is an important coding interview question. If you want to solve more questions on Linked List, which are curated by our expert mentors at PrepBytes, you can follow this link <a href="https://mycode.prepbytes.com/interview-coding/practice/linked-list">Linked List</a>.</p>
