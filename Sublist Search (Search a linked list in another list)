![](https://prepbytes-misc-images.s3.ap-south-1.amazonaws.com/assets/1645000552858-Article_133.png)
<p>The linked list is one of the most important concepts and data structures to learn while preparing for interviews. Having a good grasp of Linked Lists can be a huge plus point in a coding interview.</p>
<h3>Problem Statement</h3>
<p>Given two linked lists, our task is to check whether the first list is present in the second list or not.</p>
<h3>Problem Statement Understanding</h3>
<p>Let’s try to understand the problem statement with the help of examples.</p>
<p>According to the problem statement, we will be given two linked lists list1 and list2,  and we need to check whether list1 is present in list2 or not. </p>
<ul>
<li>If list1 is present in list2, we will output <strong>Found</strong>.</li>
<li>Otherwise, we will output <strong>Not Found</strong>.</li>
</ul>
<p>If the given linked lists are list1: 1→2→4 and list2: 1→2→1→2→4→3.</p>
<ul>
<li>As we can see, in list2 starting from the 3<sup>rd</sup> index and up to 5<sup>th</sup> index (1→2→4) (considering 1 based indexing), list2 contains all the elements of list 1 in the same order as they are present in list1. So we can say that list2 contains list1.</li>
<li>We will output <strong>Found</strong>, as we found our list1 in list2.</li>
</ul>
<p>Say, if the list1: 1→2→4 and list2: 1→2→1→2→3→4.</p>
<ul>
<li>As we can see that list2 does not contain all the elements of list1 in the same order as they were present in list1, so we will output <strong>Not Found</strong>.</li>
</ul>
<h5>Some more examples</h5>
<p>Sample Input 1: list1 = 3→5, list2 =5→3→5.
Sample Output 1: Found</p>
<p>Sample Input 2: list1 = 1→3→4, list2 = 1→2→1→3→5.
Sample Output 2: Not Found</p>
<p><strong>Remember:</strong> Here we are doing a sublist search, so if all the elements of list1 are present in list2 in the same order as they were present in list1 and these elements are consecutive in list2, then only we can say that we found list1 in list2. </p>
<p>Now I think from the above examples, the problem statement is clear. So let's see how we will approach it. Any Ideas?</p>
<ul>
<li>If not, it's okay. We will see in the next section thoroughly how we can approach this problem.</li>
</ul>
<p>Let’s move to the next section.</p>
<h3>Approach and Algorithm</h3>
<ul>
<li>Start traversing through both the list.</li>
<li>Match every node of the 2nd list (list2) with the first node of the 1st list (list1).</li>
<li>If the first node of the 1st list matches with the current node of the 2nd list.
<ul>
<li>Then, we have to check whether the remaining nodes of 1st List matches the  nodes of 2nd list or not.</li>
<li>If all nodes of 1st list (list1) are matched with 2nd list (list2), then return true.</li>
</ul></li>
<li>If all nodes of list1 didn’t match with list2 nodes, we will move forward in list2 and repeat the above process from step 2.</li>
<li>Until any of the list1 or list2 becomes empty, we will repeat the above process.</li>
<li>If our list1 got empty, then we can say that list1 found in list2, else not. </li>
</ul>
<h3>Dry Run</h3>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/09/Sublist-Search-Search-a-linked-list-in-another-list-1.png" alt="" /></p>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/09/Sublist-Search-Search-a-linked-list-in-another-list-2.png" alt="" /></p>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/09/Sublist-Search-Search-a-linked-list-in-another-list-3.png" alt="" /></p>
<p><img src="https://blog.prepbytes.com/wp-content/uploads/2021/09/output-4.png" alt="" /></p>
<h3>Code Implementation</h3>
<p>[TABS_R id=4877]</p>
<h4>Output</h4>
<p>Found</p>
<p><strong>Time Complexity:</strong> O(M * N), M is the size of lsit1 and N is the size of list2.
[forminator_quiz id="4878"]</p>
<p>So, In this blog, we have learned How to Search a linked list in another list. If you want to solve more questions on Linked List, which are curated by our expert mentors at PrepBytes, you can follow this link <a href="https://mycode.prepbytes.com/interview-coding/practice/linked-list">Linked List</a>.</p>
