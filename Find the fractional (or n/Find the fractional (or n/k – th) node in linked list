![](https://prepbytes-misc-images.s3.ap-south-1.amazonaws.com/assets/1645186177041-Find%20the%20fractional_Artboard%203.png)
<h3>Introduction</h3>
<p>The linked list is one of the most important concepts and data structures to learn while preparing for interviews. Having a good grasp of Linked Lists can be a huge plus point in a coding interview.</p>
<h3>Problem Statement</h3>
<p>In this problem, we have been given a linked list and positive integer k. Our task is to write a function that accepts the head node of the linked list as a parameter and returns the value of the node present at <strong>(ceil(n/k))</strong><sup>th</sup> position in the linked list.</p>
<p>Here, n is the count of the number of nodes in the linked list.</p>
<h3>Problem Statement Understanding</h3>
<p>Let’s try to understand the problem with help of examples.</p>
<p>Suppose we are given a linked list

<img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/example-1-2.png">

Now according to the problem statement we have to find the node at <strong>(ceil(n/k))</strong><sup>th</sup> position in the linked list and return its value.</p>
<p>For the above given linked list n = 6, as there are 6 nodes in the linked list, so</p>
<ul>
<li><strong>(ceil(n/k)) = (ceil(6/4)) = 2</strong>, it means that we have to return the value of 2<sup>nd</sup> node of the linked list as output.</li>
</ul>
<p><strong>Output:</strong> B
<strong>Explanation:</strong> We will return B in output as B is the value of <strong>(ceil(n/k))</strong><sup>th</sup> node of the above given linked list.</p>
<p>If the linked list is </p>

<img src="https://blog.prepbytes.com/wp-content/uploads/2021/08/example-2-2.png">


<p>For the above linked list n = 9 (as there are 9 nodes in the linked list), then the value of (ceil(n/k)) is:</p>
<ul>
<li><strong>(ceil(n/k)) = (ceil(9/3)) = 3</strong>, so we will return the value of the 3<sup>rd</sup> node of the linked list as output.</li>
</ul>
<p><strong>Output:</strong> C</p>
<p><strong>Note:</strong> Here in this problem we are considering 1 based indexing.</p>
<h5>Some more Examples</h5>
<p><strong>Input:</strong> </p>

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/example-3.png)

<p><strong>Output:</strong> 5</p>
<p><strong>Input:</strong> </p>

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/example-4.png)

<p><strong>Output:</strong> 60</p>
<p><strong>Input:</strong> </p>

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/example-5.png)

<p><strong>Output:</strong> 18</p>
<p>Now I think from the above examples the problem is clear, and now we have to think how can we approach it.</p>
<h3>Approach 1</h3>
<p>A simple approach is:</p>
<ul>
<li>First, loop through the linked list to find the count of number of nodes <strong>n</strong> present in the linked list.</li>
<li>Then calculate the value of (ceil(n/k)). </li>
<li>Now starting from the first node of the list traverse to this position given by <strong>(ceil(n/k))</strong> and return the data of the node at this position.</li>
</ul>
<p><strong>Time Complexity:</strong> O(n), as we are traversing the complete length of the list.
<strong>Space Complexity:</strong> O(1)</p>
<p>This approach traverses the linked list 2 times. Let's try to think, can we do better than this? Can we find out the <strong>(ceil(n/k))</strong><sup>th</sup> node of the linked list in one single traversal?</p>
<p>Let’s see the approach 2 to get the answers to the above questions.</p>
<h3>Approach 2</h3>
<p>In this approach, we can get the required node by traversing the list once only. The complete algorithm for this approach is explained below.</p>
<h3>Algorithm</h3>
<ul>
<li>If <strong>k&lt;=0</strong> or our <strong>head==NULL</strong>, then return NULL.</li>
<li>We will take two pointers <strong>temp</strong> and <strong>req_node</strong> and initialize <strong>temp</strong> with <strong>head</strong> and <strong>req_node</strong> with NULL.</li>
<li>For every <strong>k</strong> jumps of the temp pointer, we will make one jump of the <strong>req_node</strong> pointer.</li>
<li>Now when <strong>temp</strong> will be at NULL, <strong>req_node</strong> will be at <strong>(ceil(n/k))</strong><sup>th</sup> node of the linked list.</li>
<li>Finally, we will return the <strong>req_node-&gt;data</strong> as output.</li>
</ul>
<h3>Dry Run</h3>

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/Find-the-fractional-node-in-linked-list-1.png)

![](https://blog.prepbytes.com/wp-content/uploads/2021/08/Find-the-fractional-node-in-linked-list-2.png)
<h3>Code Implementation:</h3>
<p>[TABS_R id=4336]</p>
<h4>Output</h4>
<p>List is 3 5 7 9 11
Fractional node is 7</p>
<p><strong>Time Complexity:</strong> O(n), as we are traversing the complete length of the list
[forminator_quiz id="4337"]</p>
<p>So, in this article, you have learnt how to get the value of the node present at <strong>(ceil(n/k))</strong><sup>th</sup> position in the Linked List. If you want to solve more questions on Linked List, which are curated by our expert mentors at PrepBytes, you can follow this link <a href="https://mycode.prepbytes.com/interview-coding/practice/linked-list">Linked List</a>.</p>
